<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PHP101</title>
  
  <subtitle>~if you fail to plan，you plan to fail~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.php101.cn/"/>
  <updated>2019-07-12T07:45:12.000Z</updated>
  <id>http://www.php101.cn/</id>
  
  <author>
    <name>tudouya</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开源镜像汇总</title>
    <link href="http://www.php101.cn/2019/07/12/kai-yuan-jing-xiang-hui-zong.html"/>
    <id>http://www.php101.cn/2019/07/12/kai-yuan-jing-xiang-hui-zong.html</id>
    <published>2019-07-12T07:35:56.000Z</published>
    <updated>2019-07-12T07:45:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>汇总国内常见开源镜像，提高开发效率。</p><h2 id="composer镜像"><a href="#composer镜像" class="headerlink" title="composer镜像"></a>composer镜像</h2><table><thead><tr><th style="text-align:center">提供商</th><th style="text-align:center">地址</th></tr></thead><tbody><tr><td style="text-align:center">阿里云</td><td style="text-align:center"><a href="https://developer.aliyun.com/composer" target="_blank" rel="noopener">https://developer.aliyun.com/composer</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;汇总国内常见开源镜像，提高开发效率。&lt;/p&gt;
&lt;h2 id=&quot;composer镜像&quot;&gt;&lt;a href=&quot;#composer镜像&quot; class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python类方法装饰器</title>
    <link href="http://www.php101.cn/2019/05/13/python-lei-fang-fa-zhuang-shi-qi.html"/>
    <id>http://www.php101.cn/2019/05/13/python-lei-fang-fa-zhuang-shi-qi.html</id>
    <published>2019-05-13T02:24:25.000Z</published>
    <updated>2019-07-12T07:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在Python中，装饰器是随处可见的，并且装饰器也是很有用的一种语法糖。</p><p>本篇文章主要介绍Python类中常见的几个内建装饰器。</p><h2 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h2><p>在面向对象中，为类的属性创建<code>getters</code>和<code>setters</code>通常被认为是最佳实践。许多语言允许通过不同的方法实现<code>getters</code>和<code>setters</code>，或许是通过使用函数，或许是通过语言特有的<code>get</code>和<code>set</code>构造函数。</p><p>在Python中，通过使用<code>@property</code>装饰器来实现<code>getters</code>和<code>setters</code>。</p><h3 id="property-函数"><a href="#property-函数" class="headerlink" title="property()函数"></a>property()函数</h3><p>除了<code>@property</code>装饰器，<code>property()</code>函数也可以在Python中是<code>getters</code>和<code>setters</code>。</p><p>下面定义了一个包含<code>getter</code>和<code>setter</code>方法的类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Persone:</span><br><span class="line">    def __init__(self, name=&apos;Jim Green&apos;):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    def getname(self):</span><br><span class="line">        return self.__name</span><br><span class="line"></span><br><span class="line">    def setname(self, name):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person = Persone()</span><br><span class="line">print(person.getname())</span><br><span class="line"></span><br><span class="line">person.setname(&apos;David&apos;)</span><br><span class="line">print(person.getname())</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"></span><br><span class="line">Jim Green</span><br><span class="line">David</span><br></pre></td></tr></table></figure><p>从输出可以看出，<code>getname()</code>方法返回了<code>__name</code>属性的值，<code>setname()</code>方法设置了<code>__name</code>属性的值。但是，如果在修改和获取<code>__name</code>属性的时候，能隐式的调用<code>setter</code>和<code>getter</code>方法，就会方便很多。在Python中，提供了<code>propterty()</code>函数达到这种目的。</p><p>Python中<code>property()</code>方法提供了一个访问实例属性的接口，<code>property()</code>方法将<code>get</code>, ‘set’, <code>delete</code>方法作为参数，返回一个<code>属性</code>(property)类的对象。</p><p>下面为类增加一个<code>property()</code>方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Persone:</span><br><span class="line">    def __init__(self, name=&apos;Jim Green&apos;):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    def getname(self):</span><br><span class="line">        print(&apos;getname()...called&apos;)</span><br><span class="line">        return self.__name</span><br><span class="line"></span><br><span class="line">    def setname(self, name):</span><br><span class="line">        print(&apos;setname()...called&apos;)</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    name = property(getname, setname)</span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>property(getname, setname)</code>返回了一个属性对象，并赋值给了<code>name</code>。<code>name</code>属性隐藏了对象的私有属性<code>__name</code>。<code>name</code>属性可以被直接访问，但是隐式调用了<code>setname()</code>和<code>getname()</code>方法。</p><p>除了<code>getter</code>和<code>setter</code>，还可以为属性设置个<code>del</code>方法，代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&apos;Jim Green&apos;):</span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line">    def getname(self):</span><br><span class="line">        print(&apos;getname()...called&apos;)</span><br><span class="line">        return self._name</span><br><span class="line"></span><br><span class="line">    def setname(self, name):</span><br><span class="line">        print(&apos;setname()...called&apos;)</span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line">    def delname(self):</span><br><span class="line">        print(&apos;delname()...called&apos;)</span><br><span class="line">        del self._name</span><br><span class="line"></span><br><span class="line">    name = property(getname, setname, delname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person = Person(&apos;Hi&apos;)</span><br><span class="line">print(person.name)</span><br><span class="line"></span><br><span class="line">person.name = &apos;David&apos;</span><br><span class="line">print(person.name)</span><br><span class="line"></span><br><span class="line">del person.name</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"></span><br><span class="line">getname()...called</span><br><span class="line">Hi</span><br><span class="line">setname()...called</span><br><span class="line">getname()...called</span><br><span class="line">David</span><br><span class="line">delname()...called</span><br></pre></td></tr></table></figure><h3 id="property装饰器-1"><a href="#property装饰器-1" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p>相比<code>property()</code>函数，<code>@property</code>装饰器提供了一种简单的方法来定义<code>getter</code>和<code>setter</code>。</p><p><code>@property</code>装饰器是Python内建的装饰器。</p><p>下面的代码使用了<code>@property</code>装饰器为类定义了<code>getter</code>和<code>setter</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&quot;Jim&quot;):</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def name(self):</span><br><span class="line">        print(&apos;call name with property()&apos;)</span><br><span class="line">        return self.__name + &apos;Hi&apos;</span><br><span class="line"></span><br><span class="line">    @name.setter</span><br><span class="line">    def name(self, name):</span><br><span class="line">        print(&apos;call setter&apos;)</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    @name.deleter</span><br><span class="line">    def name(self):</span><br><span class="line">        print(&apos;call deleter&apos;)</span><br><span class="line">        del self.__name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person = Person(&apos;Davi&apos;)</span><br><span class="line">print(person.name)</span><br><span class="line"></span><br><span class="line">person.name = &apos;Jim&apos;</span><br><span class="line">print(person.name)</span><br><span class="line"></span><br><span class="line">del person.name</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">call name with property()</span><br><span class="line">Davi Hi</span><br><span class="line">call setter</span><br><span class="line">call name with property()</span><br><span class="line">Jim Hi</span><br><span class="line">call deleter</span><br></pre></td></tr></table></figure><p>使用<code>property()</code>或者<code>@property</code>为类设置属性的好处有以下几点:</p><ul><li>校验: 在设置类内部属性之前，可以对传入的值进行校验，只有当满足条件后，才能设置属性，如果不满足条件，则抛出错误。</li><li>懒加载: 资源可以被延迟加载，只有当真正使用的时候才被加载，可以节省时间和资源。</li><li>抽象: getter和setter可以对类内部数据的真正表示进行抽象，如上面的例子，调用<code>name</code>返回的其实是拼接出来的数据，并不是<code>__name</code>属性真正的值。</li></ul><h2 id="classmethod装饰器"><a href="#classmethod装饰器" class="headerlink" title="@classmethod装饰器"></a>@classmethod装饰器</h2><p><code>@classmethod</code>装饰器可以被用在任何一个类方法上，它允许我们使用类名直接调用方法，而不用先创建一个对象。</p><blockquote><p>被<code>@classmethod</code>装饰器装饰的方法，第一参数不是<code>self</code>, 而是<code>cls</code>, 代表类本身。</p></blockquote><p><code>@classmethod</code>装饰器使用方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    total = 0</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        Person.total = Person.total + 1</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def showTotal(cls):</span><br><span class="line">        print(f&apos;Total: &#123;cls.total&#125;&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person1 = Person()</span><br><span class="line">Person.showTotal()</span><br><span class="line"></span><br><span class="line">person2 = Person()</span><br><span class="line">Person.showTotal()</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"></span><br><span class="line">Total: 1</span><br><span class="line">Total: 2</span><br></pre></td></tr></table></figure><blockquote><p>被<code>@classmethod</code>装饰器装饰的方法，除了可以通过类名直接调用，也可以通过对象调用。</p></blockquote><h2 id="staticmethod装饰器"><a href="#staticmethod装饰器" class="headerlink" title="@staticmethod装饰器"></a>@staticmethod装饰器</h2><p><code>@staticmethod</code>同样是Python内建的装饰器，该装饰器在Python类中用来定义静态方法。</p><p>静态方法在被类实例或者类自身调用时，不接受任何参数。</p><p><code>@staticmethod</code>使用方法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class person:</span><br><span class="line">    @staticmethod</span><br><span class="line">    def greet():</span><br><span class="line">        print(&quot;Hello!&quot;)</span><br></pre></td></tr></table></figure><p>同样的，静态方法同时支持被类名和类实例调用。</p><h2 id="classmethod-vs-staticmethod"><a href="#classmethod-vs-staticmethod" class="headerlink" title="@classmethod vs @staticmethod"></a>@classmethod vs @staticmethod</h2><ul><li>classmethod将<code>cls</code>作为第一个参数，而staticmethod不需要</li><li>classmethod可以访问和修改类状态，staticmethod不能</li><li>通常会使用classmethod创建工厂方法。工厂方法会返回类对象。</li><li>通常会使用staticmethod创建工具函数。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackabuse.com/the-python-property-decorator/" target="_blank" rel="noopener">The Python Property Decorator</a></li><li><a href="https://www.machinelearningplus.com/python/python-property/" target="_blank" rel="noopener">Python @Property Explained – How to Use and When? (Full Examples)</a></li><li><a href="https://realpython.com/instance-class-and-static-methods-demystified/#instance-methods" target="_blank" rel="noopener">Python’s Instance, Class, and Static Methods Demystified</a></li><li><a href="https://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod" target="_blank" rel="noopener">What is the difference between @staticmethod and @classmethod?</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在Python中，装饰器是随处可见的，并且装饰器也是很有用的一种语法糖。&lt;/p&gt;
&lt;p&gt;本篇文章主要介绍Python类中常见的几个内建装饰器
      
    
    </summary>
    
      <category term="python" scheme="http://www.php101.cn/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python面向对象总结</title>
    <link href="http://www.php101.cn/2019/05/10/python-mian-xiang-dui-xiang-zong-jie.html"/>
    <id>http://www.php101.cn/2019/05/10/python-mian-xiang-dui-xiang-zong-jie.html</id>
    <published>2019-05-10T08:07:32.000Z</published>
    <updated>2019-07-12T07:28:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Python 是一门完全面向对象的语言。在 Python 中，一切都是对象。从我们开始使用 Python 时，我们就已经使用了 Python 中的对象和类。<br>Python 程序中的每一个元素都是类的一个实例，如数字、字符串、列表、字典这些元素，都是 Python 内置类对应的一个对象，甚至于使用<code>def</code>关键字定义的一个函数都对应一个<code>function</code>类。</p><h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><p>Python 使用<code>class</code>关键字声明一个类。</p><p>一个典型的 Python 类主要包含以下成员:</p><ul><li>构造函数 (constructor)</li><li>实例属性 (Instance Attributes)</li><li>类属性 (Class Attributes)</li><li>方法 (Class Attributes)</li></ul><p>一个类也可以没有任何成员，如下面的<code>Car</code>类就没有任何成员:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    &apos;&apos;&apos;This is an empty Car Class&apos;&apos;&apos;</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>下面的类则包含了实例属性、类属性、构造函数、方法等成员:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    brand = &apos;BenChi&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.price = 10000</span><br><span class="line">        self.chair = 7</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;Run 100km Per Hour....&apos;)</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>在 Python 中，构造函数是实例化一个类对象的时自动被调用的函数，类似于 Java 或 C# 中的构造函数。构造函数必须使用一个特定的名称<code>__init__</code>，并且必须有一个固定的参数<code>self</code>。</p><blockquote><p>Python 类中<code>几乎</code>每一个方法都要将 self 作为第一个参数，self 是调用该方法的对象的引用。其实，第一个参数的名字是任意的，并不一定要叫 self, self 只是一种约定。</p><p>注意，注意，注意: <code>__init__</code>方法并不是 Python 类构造函数，关于 Python 类的构造函数其实有很大争议，这里主要是为了介绍面向对象的概念。</p></blockquote><p>下面的例子定义了一个构造函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&apos;Call Constructor......&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">car1 = Car()</span><br><span class="line">car2 = Car()</span><br></pre></td></tr></table></figure><p>Python 中构造函数(<strong>init</strong>)的作用定义了类实例的属性，并对实例属性进行复制。</p><h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><p>实例属性是与类实例绑定的属性，其定义在构造函数(<strong>init</strong>)中。</p><p>下面的例子定义了两个实例属性:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.price = 100</span><br><span class="line">        self.chair = 7</span><br></pre></td></tr></table></figure><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><p>类属性不同于实例属性，类属性的值被所有实例对象共享。类属性在类级别定义而不是定义在<code>__init__</code>方法中。类属性的访问也不同于实例属性，类属性的访问是通过类名, 也可以通过实例访问。</p><p>下面例子定义了一个类属性:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    brand = &quot;benchi&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(Car.brand)</span><br></pre></td></tr></table></figure><h4 id="通过类名修改类属性"><a href="#通过类名修改类属性" class="headerlink" title="通过类名修改类属性"></a>通过类名修改类属性</h4><p>通过类名修改类属性，那么该类所有的实例对象对应的类属性都会被修改, 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    brand = &quot;benchi&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">car1 = Car()</span><br><span class="line">car2 = Car()</span><br><span class="line"></span><br><span class="line">print(&apos;Before Change.............&apos;)</span><br><span class="line">print(f&apos;car1 brand is: &#123;car1.brand&#125;&apos;)</span><br><span class="line">print(f&apos;car2 brand is: &#123;car2.brand&#125;&apos;)</span><br><span class="line"></span><br><span class="line">print(&apos;Change Class Attribute By [Class Name]&apos;)</span><br><span class="line">Car.brand = &apos;Audi&apos;</span><br><span class="line"></span><br><span class="line">print(&apos;After Change.............&apos;)</span><br><span class="line">print(f&apos;car1 brand is: &#123;car1.brand&#125;&apos;)</span><br><span class="line">print(f&apos;car2 brand is: &#123;car2.brand&#125;&apos;)</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">Before Change.............</span><br><span class="line">car1 brand is: benchi</span><br><span class="line">car2 brand is: benchi</span><br><span class="line">Change Class Attribute By [Class Name]</span><br><span class="line">After Change.............</span><br><span class="line">car1 brand is: Audi</span><br><span class="line">car2 brand is: Audi</span><br></pre></td></tr></table></figure><h4 id="通过实例对象修改类属性"><a href="#通过实例对象修改类属性" class="headerlink" title="通过实例对象修改类属性"></a>通过实例对象修改类属性</h4><p>通过实例对象修改类属性，并不会影响其他对象类属性的值，他仅仅影响该实例对象自己类属性的值，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    brand = &quot;benchi&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">car1 = Car()</span><br><span class="line">car2 = Car()</span><br><span class="line"></span><br><span class="line">print(&apos;Before Change.............&apos;)</span><br><span class="line">print(f&apos;car1 brand is: &#123;car1.brand&#125;&apos;)</span><br><span class="line">print(f&apos;car2 brand is: &#123;car2.brand&#125;&apos;)</span><br><span class="line"></span><br><span class="line">print(&apos;Change Class Attribute By [Object]&apos;)</span><br><span class="line">car1.brand = &apos;Audi&apos;</span><br><span class="line">car2.brand = &apos;KaYan&apos;</span><br><span class="line"></span><br><span class="line">print(&apos;After Change.............&apos;)</span><br><span class="line">print(f&apos;car1 brand is: &#123;car1.brand&#125;&apos;)</span><br><span class="line">print(f&apos;car2 brand is: &#123;car2.brand&#125;&apos;)</span><br><span class="line">print(f&apos;Car brand is: &#123;Car.brand&#125;&apos;)</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"></span><br><span class="line">Before Change.............</span><br><span class="line">car1 brand is: benchi</span><br><span class="line">car2 brand is: benchi</span><br><span class="line">Change Class Attribute By [Object]</span><br><span class="line">After Change.............</span><br><span class="line">car1 brand is: Audi</span><br><span class="line">car2 brand is: KaYan</span><br><span class="line">Car brand is: benchi</span><br></pre></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>在一个类中，可以定义尽可能多的类方法，一般情况下，类方法的第一个参数都是<code>self</code>。</p><p>下面的类就定义了一个类方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    brand = &quot;benchi&quot;</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;Run......&apos;)</span><br></pre></td></tr></table></figure><h2 id="面向对象之封装"><a href="#面向对象之封装" class="headerlink" title="面向对象之封装"></a>面向对象之封装</h2><p>面向对象语言，如Java、C++等，使用<code>public</code>、<code>protected</code>、<code>private</code>等关键字来控制对类资源的访问。  </p><ul><li><p>类的<code>private</code>成员仅能在类内部进行访问，其他任何地方都不能访问，包括其子类。</p></li><li><p>类的<code>protected</code>成员可以在类内部和其子类中访问。  </p></li><li><p>类的<code>public</code>成员可以在任何地方进行访问。</p></li></ul><p>Python没有使用关键字机制来限制对类成员方法和类成员属性的访问，Python规定了一种约定，在类方法或者类成员前加<code>_</code>(下划线)或者<code>__</code>(双下划线)来模拟<code>private</code>或者<code>public</code>访问修饰期的功能。</p><h3 id="public成员"><a href="#public成员" class="headerlink" title="public成员"></a>public成员</h3><p>Python中的所有成员默认都是<code>public</code>属性，可以在任何地方访问。</p><p>如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    def __init__(self, brand, price):</span><br><span class="line">        self.brand = brand</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;Run......&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">brand = &apos;Audi&apos;</span><br><span class="line">price = 10000</span><br><span class="line">car = Car(brand, price)</span><br><span class="line"></span><br><span class="line"># 访问类属性</span><br><span class="line">print(car.brand)</span><br><span class="line">print(car.price)</span><br><span class="line"></span><br><span class="line"># 访问类方法</span><br><span class="line">car.run()</span><br><span class="line"></span><br><span class="line">输出结果:</span><br><span class="line">Audi</span><br><span class="line">10000</span><br><span class="line">Run......</span><br></pre></td></tr></table></figure><h3 id="protected成员"><a href="#protected成员" class="headerlink" title="protected成员"></a>protected成员</h3><p>Python约定，如果类成员前加了单个下划线<code>_</code>, 则类成员为protected成员。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    def __init__(self, brand, price):</span><br><span class="line">        self._brand = brand</span><br><span class="line">        self._price = price</span><br><span class="line"></span><br><span class="line">    def _run(self):</span><br><span class="line">        print(&apos;Run......&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">brand = &apos;Audi&apos;</span><br><span class="line">price = 10000</span><br><span class="line">car = Car(brand, price)</span><br><span class="line"></span><br><span class="line"># 访问protected属性</span><br><span class="line">print(car._brand)</span><br><span class="line">print(car._price)</span><br><span class="line"></span><br><span class="line"># 修改protected属性</span><br><span class="line">car._price = 20000</span><br><span class="line">print(car._price)</span><br><span class="line"></span><br><span class="line"># 访问类方法</span><br><span class="line">car._run()</span><br><span class="line"></span><br><span class="line">输出结果:</span><br><span class="line">Audi</span><br><span class="line">10000</span><br><span class="line">20000</span><br><span class="line">Run......</span><br></pre></td></tr></table></figure><p>使用单下划线的方式将属性声明为<code>protected</code>, 并不能真正起到作用，它仅仅是一种约定。</p><h3 id="private成员"><a href="#private成员" class="headerlink" title="private成员"></a>private成员</h3><p>Python约定，如果类成员前加了双下划线<code>__</code>, 则类成员为private成员。</p><p>如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    def __init__(self, brand, price):</span><br><span class="line">        self._brand = brand</span><br><span class="line">        self._price = price</span><br><span class="line"></span><br><span class="line">    def __run(self):</span><br><span class="line">        print(&apos;Run......&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 访问类方法</span><br><span class="line">car._run()  # 程序报错，&apos;Car&apos; object has no attribute &apos;_run&apos;</span><br></pre></td></tr></table></figure><h2 id="面向对象之继承"><a href="#面向对象之继承" class="headerlink" title="面向对象之继承"></a>面向对象之继承</h2><p>在面向对象编程中，继承是达到代码重用目的的一种方式。在继承中，子类可以使用其父类的一部分代码。</p><h3 id="继承的基本使用"><a href="#继承的基本使用" class="headerlink" title="继承的基本使用"></a>继承的基本使用</h3><p>下面先创建一个父类, 代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Fish:</span><br><span class="line">    def __init__(self, first_name, last_name=&quot;Fish&quot;,</span><br><span class="line">                 skeleton=&quot;bone&quot;, eyelids=False):</span><br><span class="line">        self.first_name = first_name</span><br><span class="line">        self.last_name = last_name</span><br><span class="line">        self.skeleton = skeleton</span><br><span class="line">        self.eyelids = eyelids</span><br><span class="line"></span><br><span class="line">    def swim(self):</span><br><span class="line">        print(&quot;The fish is swimming.&quot;)</span><br><span class="line"></span><br><span class="line">    def swim_backwards(self):</span><br><span class="line">        print(&quot;The fish can swim backwards.&quot;)</span><br></pre></td></tr></table></figure><p>接下来，创建一个没有任何方法和属性的子类，代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Trout(Fish):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><blockquote><p>Python类继承的语法是在定义类的时候，传入父类的名字作为参数</p></blockquote><p>由于<code>Trout</code>类继承了<code>Fish</code>类，<code>Trout</code>类就是<code>Fish</code>类的子类，<code>Trout</code>类的对象就可以调用其父类的所有方法，代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">terry = Trout(&quot;Terry&quot;)</span><br><span class="line">print(terry.first_name + &quot; &quot; + terry.last_name)</span><br><span class="line">print(terry.skeleton)</span><br><span class="line">print(terry.eyelids)</span><br><span class="line">terry.swim()</span><br><span class="line">terry.swim_backwards()</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"></span><br><span class="line">Terry Fish</span><br><span class="line">bone</span><br><span class="line">False</span><br><span class="line">The fish is swimming.</span><br><span class="line">The fish can swim backwards.</span><br></pre></td></tr></table></figure><p>接下来，再创建另一个子类，该子类有自己的方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Clownfish(Fish):</span><br><span class="line"></span><br><span class="line">    def live_with_anemone(self):</span><br><span class="line">        print(&quot;The clownfish is coexisting with sea anemone.&quot;)</span><br></pre></td></tr></table></figure><p>创建<code>Clownfish</code>的一个对象，并调用其方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Clownfish(Fish):</span><br><span class="line"></span><br><span class="line">    def live_with_anemone(self):</span><br><span class="line">        print(&quot;The clownfish is coexisting with sea anemone.&quot;)</span><br><span class="line"></span><br><span class="line">casey = Clownfish(&quot;Casey&quot;)</span><br><span class="line">print(casey.first_name + &quot; &quot; + casey.last_name)</span><br><span class="line">casey.swim()</span><br><span class="line">casey.live_with_anemone()</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">Casey Fish</span><br><span class="line">The fish is swimming.</span><br><span class="line">The clownfish is coexisting with sea anemone.</span><br></pre></td></tr></table></figure><p>从输出结果可以看出，<code>Clownfish</code>的对象<code>casey</code>可以调用其父类的<code>swim()</code>方法和<code>__init__()</code>方法，同时可以调用它自身的<code>live_with_anemone()</code>方法。</p><h3 id="覆盖父类方法"><a href="#覆盖父类方法" class="headerlink" title="覆盖父类方法"></a>覆盖父类方法</h3><p>有时候，子类继承了父类的全部方法和属性，但是只想使用其中的一部分方法和属性，当子类定义了和父类一样的方法时，就会覆盖(override)父类的方法。</p><blockquote><p>有一点需要注意的是，尽管子类覆盖了父类的方法，但是并没有产生多余的代码。</p></blockquote><p>下面定义一个覆盖父类<code>__init__()</code>方法和<code>swim_backwards()</code>方法的类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Shark(Fish):</span><br><span class="line">    def __init__(self, first_name, last_name=&quot;Shark&quot;,</span><br><span class="line">                 skeleton=&quot;cartilage&quot;, eyelids=True):</span><br><span class="line">        self.first_name = first_name</span><br><span class="line">        self.last_name = last_name</span><br><span class="line">        self.skeleton = skeleton</span><br><span class="line">        self.eyelids = eyelids</span><br><span class="line"></span><br><span class="line">    def swim_backwards(self):</span><br><span class="line">        print(&quot;The shark cannot swim backwards, but can sink backwards.&quot;)</span><br><span class="line"></span><br><span class="line">sammy = Shark(&quot;Sammy&quot;)</span><br><span class="line">print(sammy.first_name + &quot; &quot; + sammy.last_name)</span><br><span class="line">sammy.swim()</span><br><span class="line">sammy.swim_backwards()</span><br><span class="line">print(sammy.eyelids)</span><br><span class="line">print(sammy.skeleton)</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line">Sammy Shark</span><br><span class="line">The fish is swimming.</span><br><span class="line">The shark cannot swim backwards, but can sink backwards.</span><br><span class="line">True</span><br><span class="line">cartilage</span><br></pre></td></tr></table></figure><p>从输出结果可以看出，子类成功覆盖了父类的方法。</p><h3 id="super-函数"><a href="#super-函数" class="headerlink" title="super()函数"></a>super()函数</h3><p>如果子类覆盖了父类的方法，同时又想使用父类的方法，可以使用<code>super()</code>函数。</p><p><code>super()</code>函数经常在<code>__init__()</code>方法中被使用。</p><p>修改一下上文所提到的<code>Trout</code>类，代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Trout(Fish):</span><br><span class="line">    def __init__(self, water = &quot;freshwater&quot;):</span><br><span class="line">        self.water = water</span><br><span class="line">        super().__init__(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">terry = Trout()</span><br><span class="line"></span><br><span class="line">terry.first_name = &quot;Terry&quot;</span><br><span class="line"></span><br><span class="line">print(terry.first_name + &quot; &quot; + terry.last_name)</span><br><span class="line">print(terry.eyelids)</span><br><span class="line"></span><br><span class="line">print(terry.water)</span><br><span class="line"></span><br><span class="line">terry.swim()</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"></span><br><span class="line">Terry Fish</span><br><span class="line">False</span><br><span class="line">freshwater</span><br><span class="line">The fish is swimming.</span><br></pre></td></tr></table></figure><p>从输出结果可以看出，使用<code>super()</code>函数成功调用了父类被子类覆盖的方法。</p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>多重继承即一个类可以继承多个类。</p><p>多重继承基本语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Coral:</span><br><span class="line"></span><br><span class="line">    def community(self):</span><br><span class="line">        print(&quot;Coral lives in a community.&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Anemone:</span><br><span class="line"></span><br><span class="line">    def protect_clownfish(self):</span><br><span class="line">        print(&quot;The anemone is protecting the clownfish.&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CoralReef(Coral, Anemone):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章总结了Python面向对象的基本概念及基本使用方法，弥补自己在Python方面面向对象方法的不足。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://radek.io/2011/07/21/private-protected-and-public-in-python/" target="_blank" rel="noopener">Private, protected and public in Python</a></li><li><a href="https://www.digitalocean.com/community/tutorials/understanding-class-inheritance-in-python-3" target="_blank" rel="noopener">Understanding Class Inheritance in Python 3</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Python 是一门完全面向对象的语言。在 Python 中，一切都是对象。从我们开始使用 Python 时，我们就已经使用了 Python
      
    
    </summary>
    
      <category term="python" scheme="http://www.php101.cn/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6实战</title>
    <link href="http://www.php101.cn/2019/03/24/es6-shi-zhan.html"/>
    <id>http://www.php101.cn/2019/03/24/es6-shi-zhan.html</id>
    <published>2019-03-24T04:13:32.000Z</published>
    <updated>2019-07-12T07:28:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ES6风风风火火的出来很长时间了，从最初的babel插件支持，到vue或者react框架，再到浏览器原生支持。ES6中定义了很多方便实用的特性，但是一直没怎么深入了解，从今天起开始陆续深入平时写代码的过程中，遇到的ES6各种特性。</p><h2 id="扩展运算符-spread-operator-…"><a href="#扩展运算符-spread-operator-…" class="headerlink" title="扩展运算符(spread operator)…"></a>扩展运算符(spread operator)…</h2><p>使用扩展运算符可以展开数组，对象和字符串。</p><blockquote><p>扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</p></blockquote><h3 id="创建新数组"><a href="#创建新数组" class="headerlink" title="创建新数组"></a>创建新数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const a = [1, 2, 3]</span><br><span class="line">const b = [...a, 4, 5, 6] // Array(6) [ 1, 2, 3, 4, 5, 6 ]</span><br></pre></td></tr></table></figure><h3 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ES5中concat()方法</span><br><span class="line">const arr1 = [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">const arr2 = [&quot;c&quot;]</span><br><span class="line">const arr3 = [&quot;d&quot;, &quot;e&quot;]</span><br><span class="line">const arrAll = arr1.concat(arr2, arr3) // Array(5) [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</span><br><span class="line"></span><br><span class="line">// 扩展云算法</span><br><span class="line">const arrAll = [...arr1, ...arr2, ...arr3] // Array(5) [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]</span><br></pre></td></tr></table></figure><h3 id="创建新数组-1"><a href="#创建新数组-1" class="headerlink" title="创建新数组"></a>创建新数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const arr1 = [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line">const arr2 = [&quot;c&quot;]</span><br><span class="line">const arr3 = [&quot;d&quot;, &quot;e&quot;]</span><br><span class="line">const arr4 = [...arr1, ...arr2, ...arr3, &quot;f&quot;, &quot;g&quot;] // Array(7) [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot; ]</span><br></pre></td></tr></table></figure><h3 id="创建新对象"><a href="#创建新对象" class="headerlink" title="创建新对象"></a>创建新对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const oldPerson = &#123;</span><br><span class="line">  user: &quot;tudouya&quot;,</span><br><span class="line">  password: &quot;123456&quot;</span><br><span class="line">&#125;</span><br><span class="line">const newPerson = &#123; ...oldPerson &#125; // Object &#123; user: &quot;tudouya&quot;, password: &quot;123456&quot; &#125;</span><br></pre></td></tr></table></figure><h3 id="展开字符串"><a href="#展开字符串" class="headerlink" title="展开字符串"></a>展开字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const str = &quot;hello&quot;</span><br><span class="line">const arr = [...str] // Array(5) [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;ES6风风风火火的出来很长时间了，从最初的babel插件支持，到vue或者react框架，再到浏览器原生支持。ES6中定义了很多方便实用的特
      
    
    </summary>
    
      <category term="javascript" scheme="http://www.php101.cn/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript创建对象方式总结</title>
    <link href="http://www.php101.cn/2019/02/25/javascript-chuang-jian-dui-xiang-fang-shi-zong-jie.html"/>
    <id>http://www.php101.cn/2019/02/25/javascript-chuang-jian-dui-xiang-fang-shi-zong-jie.html</id>
    <published>2019-02-25T02:38:23.000Z</published>
    <updated>2019-07-12T07:28:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在JavaScript中， 对象向我们提供了一种存储，操作，并在网络中传输数据的方式。同时，把对象当成键值对的集合，给我们带来了一种最常用的创建JavaScript对象的方法。</p><h2 id="使用对象字面值-object-literal-创建对象"><a href="#使用对象字面值-object-literal-创建对象" class="headerlink" title="使用对象字面值(object literal)创建对象"></a>使用对象字面值(object literal)创建对象</h2><p>在JavaScript中，这是创建对象最简单的方式。语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    firstName: &apos;san&apos;,</span><br><span class="line">    lastName: &apos;zhang&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用new关键字创建对象"><a href="#使用new关键字创建对象" class="headerlink" title="使用new关键字创建对象"></a>使用new关键字创建对象</h2><p>这种创建对象的方式，类似于在其他面向对象的语言中创建对象，如Java。顺便说一下，从ES6开始，类在JavaScript中是原生存在的，可以通过定义类来创建对象。使用<code>new</code>关键字创建对象，需要一个<code>构造器函数</code>。</p><p>使用<code>new</code>关键字创建对象，有如下两种形式:</p><h3 id="使用内建的Object构造器函数"><a href="#使用内建的Object构造器函数" class="headerlink" title="使用内建的Object构造器函数"></a>使用内建的Object构造器函数</h3><p>创建对象:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var person = new Object()</span><br></pre></td></tr></table></figure><p>向对象添加属性:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.firtName = &apos;san&apos;</span><br><span class="line">person.lastName = &apos;zhang&apos;</span><br></pre></td></tr></table></figure><p>不推荐使用这种方式创建对象，因为会涉及到<code>作用域解析</code>，JavaScript会去检测构造器函数是用户创建的还是系统内建的。</p><h3 id="使用用户定义的构造器函数"><a href="#使用用户定义的构造器函数" class="headerlink" title="使用用户定义的构造器函数"></a>使用用户定义的构造器函数</h3><p>使用<code>Object()</code>构造器函数创建对象的问题是每次创建完对象，都需要手工去为对象添加属性。<br>为了避免每次都需要手工为对象添加属性，我们可以创建一个自定义函数。首先，我们创建一个构造器函数，然后使用<code>new</code>关键字创建对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person(firstName, lastName) &#123;</span><br><span class="line">  this.firstName = firstName</span><br><span class="line">  this.lastName = lastName</span><br><span class="line">&#125;</span><br><span class="line">var person = new Person(&quot;san&quot;, &quot;zhang&quot;)</span><br><span class="line">var person1 = new Person(&quot;si&quot;, &quot;li&quot;)</span><br></pre></td></tr></table></figure><p>在这种创建对象的方式中，new关键字执行了以下步骤:</p><ol><li>调用函数</li><li>修改<code>this</code>关键字指向，将该函数的<code>this</code>指向一个新对象</li><li>将新对象的原型(prototype)绑定到函数的原型</li></ol><p>代码说明如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// new关键字</span><br><span class="line">function Person(name) &#123;</span><br><span class="line">  this.name = name</span><br><span class="line">&#125;</span><br><span class="line">var person = new Person(&quot;tudouya&quot;)</span><br><span class="line"></span><br><span class="line">// 等价代码</span><br><span class="line">var person1 = Object.create(Person.prototype)</span><br></pre></td></tr></table></figure><h2 id="原型-Prototype-方法创建对象"><a href="#原型-Prototype-方法创建对象" class="headerlink" title="原型(Prototype)方法创建对象"></a>原型(Prototype)方法创建对象</h2><p>使用原型方法创建对象，代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = &quot;tudouya&quot;;</span><br></pre></td></tr></table></figure><h2 id="原型和函数结合创建对象"><a href="#原型和函数结合创建对象" class="headerlink" title="原型和函数结合创建对象"></a>原型和函数结合创建对象</h2><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person(name)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">&#125; </span><br><span class="line">Person.prototype.getName = function()&#123;</span><br><span class="line">  return this.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Object-create-方法创建对象"><a href="#使用Object-create-方法创建对象" class="headerlink" title="使用Object.create()方法创建对象"></a>使用Object.create()方法创建对象</h2><p>使用这种方式创建对象，可以很方便的从一个已经存在的对象创建一个新对象，而不用使用<code>new</code>关键字。</p><blockquote><p>Object.create()方法基于一个已经存在的对象作为新创建对象的原型。</p></blockquote><p>使用<code>Object.create()</code>方法创建对象，只需要记住它需要传入两个参数。第一个参数可以是任意一个对象，该对象作为新创建对象的原型。第二个参数是可选参数，类型是对象，该对象包含向新创建对象添加的属性。</p><p>假设有一个班级对象<code>Class</code>:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var classObj = &#123; className: &quot;一班&quot;, studentNum: 100 &#125;</span><br></pre></td></tr></table></figure><p>现在想为这个班级创建一个学生，可以使用如下方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var studentObj = Object.create(classObj, &#123;</span><br><span class="line">  studentName: &#123;</span><br><span class="line">    value: &quot;小明&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  studentAge: &#123;</span><br><span class="line">    value: 29</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意第二个参数的写法</p></blockquote><h2 id="使用Object-assign-方法创建对象"><a href="#使用Object-assign-方法创建对象" class="headerlink" title="使用Object.assign()方法创建对象"></a>使用Object.assign()方法创建对象</h2><p>假如我们想创建一个拥有一个以上对象的所有属性的新对象，<code>Object.assign()</code>方法可以实现这种目的。</p><blockquote><p>Object.assign()方法用来将一个或多个源对象的所有可枚举的属性拷贝到一个目标对象中。</p></blockquote><p><code>Object.assign()</code>可以接受任意数量的对象作为参数。第一个参数是他即将创建，并且返回的参数。其余传入的对象参数，被用来将属性复制到新对象中。</p><p>假设有如下两个对象:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var orgObj = &#123; company: &quot;Baidu&quot; &#125;</span><br><span class="line">var carObj = &#123; carName: &quot;Kayan&quot; &#125;</span><br></pre></td></tr></table></figure><p>现在需要一个在<code>Baidu</code>公司开着<code>Kayan</code>的员工，可以使用如下方式创建对象:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var employee = Object.assign(&#123;&#125;, carObj, orgObj)</span><br></pre></td></tr></table></figure><h2 id="singleton-单例-方法创建对象"><a href="#singleton-单例-方法创建对象" class="headerlink" title="singleton(单例)方法创建对象"></a>singleton(单例)方法创建对象</h2><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var person = new function()&#123;</span><br><span class="line">  this.name = &quot;tudouya&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用ES6-class创建对象"><a href="#使用ES6-class创建对象" class="headerlink" title="使用ES6 class创建对象"></a>使用ES6 class创建对象</h2><p>使用ES6 class创建对象与使用用户定义的函数构造器创建对象方法类似。构造器函数被类替代，因为它遵循ES6规范。</p><p>示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  constructor(firstName, lastName) &#123;</span><br><span class="line">    this.firstName = firstName</span><br><span class="line">    this.lastName = lastName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var person = new Person(&quot;san&quot;, &quot;zhang&quot;)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://coderwall.com/p/p5cf5w/different-ways-of-creating-an-object-in-javascript" target="_blank" rel="noopener">Different ways of creating an Object in javascript</a></li><li><a href="https://stackoverflow.com/questions/6843951/which-way-is-best-for-creating-an-object-in-javascript-is-var-necessary-befor" target="_blank" rel="noopener">Which way is best for creating an object in JavaScript? Is <code>var</code> necessary before an object property?</a></li><li><a href="https://medium.freecodecamp.org/a-complete-guide-to-creating-objects-in-javascript-b0e2450655e8" target="_blank" rel="noopener">How to create objects in JavaScript</a></li></ul><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在JavaScript中， 对象向我们提供了一种存储，操作，并在网络中传输数据的方式。同时，把对象当成键值对的集合，给我们带来了一种最常用的
      
    
    </summary>
    
      <category term="javascript" scheme="http://www.php101.cn/categories/javascript/"/>
    
    
  </entry>
  
</feed>
